The objective of this project is to enhance the security and functionality of a JWKS (JSON Web Key Set) server by implementing AES encryption for private keys, adding user registration capabilities, logging authentication requests, and optionally introducing a rate limiter to control request frequency.

Requirements:
AES Encryption of Private Keys
Encrypt private keys in the database using symmetric AES encryption.
Use a key provided from the environment variable named NOT_MY_KEY for encryption and decryption.
Ensure the encryption process is secure and the key is never exposed.
User Registration
Create a users table in the database with appropriate fields for storing user information and hashed passwords.
Implement a POST:/register endpoint that accepts user registration details, generates a secure password, and stores user details securely.
Logging Authentication Requests
Create a auth_logs table to log authentication requests with details such as request IP address and timestamp.
Log authentication requests for each POST:/auth request.
Rate Limiter (Optional)
Implement a time-window rate limiter for the POST:/auth endpoint to limit requests per second.
Return a 429 Too Many Requests status code for requests over the limit.

Setup and Usage:
install the required dependencies using pip install -r requirements.txt.
Install the argon2 package using pip install argon2.
Set up the environment variable NOT_MY_KEY with the AES encryption key.
Ensure that your database server is running and accessible.
Run the JWKS server using python jwks_server.py.